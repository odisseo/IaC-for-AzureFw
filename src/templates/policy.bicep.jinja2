// Azure Firewall Policy Bicep Template
// Save this as filepath: scripts\templates\policy.bicep.jinja2

{%- set lstrip_blocks = true -%}
{%- set trim_blocks = true -%}

{# Import macros from external file #}
{% import '_macros.jinja2' as fw_macros %}

{# Generate Firewall Policy resources #}
{%- for policy_name, policy_data in policies.items() -%}
{%- set policy_name_with_date = policy_name -%}
{%- set policy_resource_name = policy_name_with_date | replace('-', '_') | replace('.', '_') -%}
resource {{ policy_resource_name }} 'Microsoft.Network/firewallPolicies@{{ api_version }}' = {
  name: '{{ policy_name_with_date }}'
  location: '{{ regionName }}'
  tags: {
    scope: 'Azure Firewall Enviroment'
    team: 'Network'
    Role: 'Network management'
  }
  properties: {
    sku: {
      tier: 'Premium'
    }
    threatIntelMode: 'Alert'
    threatIntelWhitelist: {
      ipAddresses: []
    }
    dnsSettings: {
      servers: []
      enableProxy: true
    }{%- if policy_data["basePolicy"] %}
    basePolicy: {
      {%- set firewallPolicyResourceId = "/subscriptions/" + subscriptionid + "/resourceGroups/" + policiesrg + "/providers/Microsoft.Network/firewallPolicies/" + policy_data["basePolicy"] + "-" + policy_data["date_suffix"] %}
      id: '{{ firewallPolicyResourceId }}'
    }{%- endif %}
  }
  {% set dependsOn = [] -%}
  {%- if policy_data["basePolicy"] -%}
    {%- set _ = dependsOn.append(policy_data["basePolicy"] | replace('-', '_') | replace('.', '_')) -%}
  {%- endif -%}
  dependsOn: {{ fw_macros.render_resource_array_dependson(dependsOn) }}
}

{# Generate Rule Collection Group resources #}
{%- for rcg_index in range(policy_data["rcg_order"] | length) -%}
{%- set rcg_name = policy_data["rcg_order"][rcg_index] -%}
{%- set rcg_data = policy_data["rcgs"][rcg_name] -%}
{%- set rcg_resource_name = policy_resource_name + '_' + rcg_name | replace('-', '_') | replace('.', '_') -%}
resource {{ rcg_resource_name }} 'Microsoft.Network/firewallPolicies/ruleCollectionGroups@{{ api_version }}' = {
  parent: {{ policy_resource_name }}
  name: '{{ rcg_name }}'
  location: '{{ regionName }}'
  {% set dependsOn = [policy_resource_name] -%}
  {%- if rcg_index > 0 -%}
    {%- set prev_rcg_name = policy_data["rcg_order"][rcg_index - 1] -%}
    {%- set prev_rcg_resource = policy_resource_name + '_' + prev_rcg_name | replace('-', '_') | replace('.', '_') -%}
    {%- set _ = dependsOn.append(prev_rcg_resource) -%}
  {%- endif -%}
  dependsOn: {{ fw_macros.render_resource_array_dependson(dependsOn) }}
  properties: {
    priority: {{ rcg_data["RuleCollectionGroupPriority"] }}
    ruleCollections: [
    {%- if rcg_data["ruleCollections"] -%}
      {%- for rc_name, rc_data in rcg_data["ruleCollections"].items() -%}
      {
        name: '{{ rc_name }}'
        priority: {{ rc_data["RuleCollectionPriority"] }}
        ruleCollectionType: '{{ rc_data["rules"][0]["RuleCollectionType"] }}'
        action: {
          type: '{{ rc_data["rules"][0]["RuleCollectionAction"] }}'
        }
        rules: [
        {%- if rc_data["rules"] -%}
          {%- for rule in rc_data["rules"] -%}
          {
            ruleType: '{{ rule["RuleType"] }}'
            name: '{{ rule["RuleName"] }}'
            {%- if rule["RuleType"] == "NetworkRule" %}
            {# Network Rule specific properties #}
            ipProtocols: {{ fw_macros.render_array(rule["IpProtocols"]) }}
            sourceAddresses: {{ fw_macros.render_array(rule["SourceAddresses"]) }}
            sourceIpGroups: {{ fw_macros.render_ip_groups_array(rule["SourceIpGroups"], ipgroupssubscriptionid, ipgrouprg) }}
            destinationAddresses: {{ fw_macros.render_array(rule["DestinationAddresses"]) }}
            destinationIpGroups: {{ fw_macros.render_ip_groups_array(rule["DestinationIpGroups"], ipgroupssubscriptionid, ipgrouprg) }}
            destinationFqdns: {{ fw_macros.render_array(rule["DestinationFqdns"]) }}
            destinationPorts: {{ fw_macros.render_array(rule["DestinationPorts"]) }}
            {%- elif rule["RuleType"] == "NatRule" %}
            {# NAT Rule specific properties #}
            {%- if rule.get("TranslatedAddress") %}
            translatedAddress: '{{ rule["TranslatedAddress"] }}'
            {%- endif %}
            {%- if rule.get("TranslatedFqdn") %}
            translatedFqdn: '{{ rule["TranslatedFqdn"] }}'
            {%- endif %}
            {%- if rule.get("TranslatedPort") %}
            translatedPort: '{{ rule["TranslatedPort"] }}'
            {%- endif %}
            ipProtocols: {{ fw_macros.render_array(rule["IpProtocols"]) }}
            sourceAddresses: {{ fw_macros.render_array(rule["SourceAddresses"]) }}
            sourceIpGroups: {{ fw_macros.render_ip_groups_array(rule["SourceIpGroups"], ipgroupssubscriptionid, ipgrouprg) }}
            destinationAddresses: {{ fw_macros.render_array(rule["DestinationAddresses"]) }}
            destinationPorts: {{ fw_macros.render_array(rule["DestinationPorts"]) }}
            {%- elif rule["RuleType"] == "ApplicationRule" %}
            {# Application Rule specific properties #}
            protocols: {{ fw_macros.render_protocols_array(rule.get("Protocols", "")) }}
            fqdnTags: {{ fw_macros.render_array(rule.get("FqdnTags", "")) }}
            webCategories: {{ fw_macros.render_array(rule.get("WebCategories", "")) }}
            targetFqdns: {{ fw_macros.render_array(rule.get("TargetFqdns", "")) }}
            targetUrls: {{ fw_macros.render_array(rule.get("TargetUrls", "")) }}
            terminateTLS: {{ rule.get("TerminateTLS", "false")|lower }}
            sourceAddresses: {{ fw_macros.render_array(rule["SourceAddresses"]) }}
            destinationAddresses: {{ fw_macros.render_array(rule["DestinationAddresses"]) }}
            sourceIpGroups: {{ fw_macros.render_ip_groups_array(rule["SourceIpGroups"], ipgroupssubscriptionid, ipgrouprg) }}
            httpHeadersToInsert: {{ fw_macros.render_http_headers_array(rule.get("HttpHeadersToInsert", "")) }}
            {%- endif %}
          }
          {% endfor -%}
        {%- endif -%}
        ]
      }
      {% endfor -%}
    {%- endif -%}
    ]
  }
}
{% endfor %}
{%- endfor %}